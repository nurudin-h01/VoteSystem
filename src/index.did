type Candidate = record {
  id : text;
  citizenIds : vec text;
  natIdentificationNumber : int;
  name : text;
};
type Citizen = record {
  id : text;
  natIdentificationNumber : int;
  name : text;
  candidateId : text;
};
type DataError = variant {
  CitizenDoesNotExist : text;
  CandidateDoesNotExist : text;
};
type ResultPolling = record { id : text; name : text; count : nat64 };
type _AzleResult = variant { Ok : Citizen; Err : DataError };
service : () -> {
  createCandidate : (text, nat64) -> (Candidate);
  createCitizenAndVote : (text, int, text) -> (_AzleResult);
  readCandidates : () -> (vec Candidate) query;
  readCitizenById : (text) -> (opt Citizen) query;
  readCitizens : () -> (vec Citizen) query;
  readPolling : () -> (vec ResultPolling) query;
}